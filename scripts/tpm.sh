#! /bin/bash

source ./globals.sh
source ./utility.sh

#############
### COLOR ###
#############

RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

###############
### TPM 2.0 ###
###############

# Import key to TPM
#
# $1 - input object file path
# $2 - key path in TPM (optional) - default: PUB_SIGN_KEY
import_key() {
    local INPUT_OBJECT="$1"
    local KEY_PATH="${2:-$PUB_SIGN_KEY}"

    if [[ "$(tss2_list)" != *"ext$KEY_PATH"* ]]; then
        tss2_import \
            -p $KEY_PATH \
            -i $INPUT_OBJECT
    else
        echo -e "${YELLOW}WARNING:${NC} \"$KEY_PATH\" already imported"
    fi
}

create_key() {
    KEY_PATH="$1"
    TYPE="$2"

    if [[ "$(tss2_list)" == *"$KEY_PATH"* ]]; then
        echo -e "${RED}ERROR:${NC} \"$KEY_PATH\" already exists"
        exit 1
    fi

    if [ "$TYPE" != "sign" ] && [ "$TYPE" != "decrypt" ]; then
        echo -e "${RED}ERROR:${NC} Invalid type: \"$TYPE\""
        exit 1
    fi

    tss2_createkey \
        -p $KEY_PATH \
        -t $TYPE \
        -a ""
}

# Encrypt file
#
# $1 - input file path
# $2 - output file path
# $3 - key path in TPM (optional) - default: ENC_KEY
encrypt() {
    local INPUT_FILE_PATH="$1"
    local OUTPUT_FILE_PATH="$2"
    local KEY_PATH="${3:-$ENC_KEY}"
    
    tss2_encrypt \
        -p "$KEY_PATH" \
        -i "$INPUT_FILE_PATH" \
        -o "$OUTPUT_FILE_PATH"

    if [ $? -ne 0 ]; then
        echo -e "${RED}ERROR:${NC} Encryption function"
        exit 1
    fi
}

# Decrypt file
#
# $1 - input file path
# $2 - output file path
# $3 - key path in TPM (optional) - default: ENC_KEY
decrypt() {
    local INPUT_FILE_PATH="$1"
    local OUTPUT_FILE_PATH="$2"
    local KEY_PATH="${3:-$ENC_KEY}"
    
    tss2_decrypt \
        -p "$KEY_PATH" \
        -i "$INPUT_FILE_PATH" \
        -o "$OUTPUT_FILE_PATH"
}

# Sign
#
# $1 - digest file path generated by sha256 function
# $2 - signature file path (optional) - default: signature - output file
# $3 - public key file path (optional) - default: pub_key - output file
# $4 - key path in TPM (optional) - default: SIGN_KEY
#
# Returns public key file path
sign() {
    local DIGEST="$1"
    local SIGNATURE="${2:-signature}"
    local PUB_KEY="${3:-pub_key}"
    local KEY_PATH="${4:-$SIGN_KEY}"

    tss2_sign \
        -p "$KEY_PATH" \
        -d "$DIGEST" \
        -o "$SIGNATURE" \
        -k "$PUB_KEY"
    
    echo "$PUB_KEY"
}

# Verify signature
#
# $1 - digest file path generated by sha256 function
# $2 - signature file path (optional) - default: signature
# $3 - key path in TPM (optional) - default: PUB_SIGN_KEY
verify_sign() {
    local DIGEST="$1"
    local SIGNATURE="${2:-signature}"
    local KEY_PATH="${3:-$PUB_SIGN_KEY}"

    tss2_verifysignature \
        -p "/ext$KEY_PATH" \
        -d "$DIGEST" \
        -i "$SIGNATURE"
        
    if [ $? -ne 0 ]; then
        echo -e "${RED}ERROR:${NC} Invalid Sign"

        echo "### CLEANUP ###"
        file_to_clean=($DIGEST)
        cleanup "${file_to_clean[@]}"

        exit 1
    fi
}